{"ID":"20241011005844-95evlwf","Spec":"1","Type":"NodeDocument","Properties":{"id":"20241011005844-95evlwf","title":"scala和java代码量差别","type":"doc","updated":"20241011010359"},"Children":[{"ID":"20241011010359-j32p3zm","Type":"NodeParagraph","Properties":{"id":"20241011010359-j32p3zm","updated":"20241011010359"},"Children":[{"Type":"NodeText","Data":"我用scala完成了Java实验课的上机题，然后让GPT转译成了Java代码用来提交。偶然间发现同一个问题的解决代码，我写的scala代码的字符数为3272，ChatGPT转译的代码竟然有6245个字符，代码量几乎翻倍了。如果代码量和思考量线性相关的话，虽然我知道对于相同的问题使用不同的语言应该会有所差别，但我没想到差距居然会这么大，居然有一倍的思考量的差异。（我又让GPT转译成了Python，代码量为3125字符，大概与scala相当。但Python可没有的类型安全）"}]},{"ID":"20241011010359-5bx1r3j","Type":"NodeParagraph","Properties":{"id":"20241011010359-5bx1r3j","updated":"20241011010359"},"Children":[{"Type":"NodeText","Data":"具体的分析的话，差出的字符数大概来自于以下几个方面："}]},{"ID":"20241011010359-dwei801","Type":"NodeList","ListData":{},"Properties":{"id":"20241011010359-dwei801","updated":"20241011010359"},"Children":[{"ID":"20241011010359-klnb4tf","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241011010359-klnb4tf","updated":"20241011010359"},"Children":[{"ID":"20241011010359-ocmian8","Type":"NodeParagraph","Properties":{"id":"20241011010359-ocmian8","updated":"20241011010359"},"Children":[{"Type":"NodeText","Data":"Java里奇怪的访问权限修饰符，比如public, static。scala里可以不加。"}]}]},{"ID":"20241011010359-4bqsh84","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241011010359-4bqsh84","updated":"20241011010359"},"Children":[{"ID":"20241011010359-440qwvu","Type":"NodeParagraph","Properties":{"id":"20241011010359-440qwvu","updated":"20241011010359"},"Children":[{"Type":"NodeText","Data":"Java的流程控制中的样板代码，比如for(int i = 0; i \u003c n; i++), scala一般用map或filter就行了"}]}]},{"ID":"20241011010359-dklrdy2","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241011010359-dklrdy2","updated":"20241011010359"},"Children":[{"ID":"20241011010359-95zwnyt","Type":"NodeParagraph","Properties":{"id":"20241011010359-95zwnyt","updated":"20241011010359"},"Children":[{"Type":"NodeText","Data":"Java不灵活的字符串构建机制，在特定场景下必须用一堆堆的StringBuilder来完成任务"}]}]},{"ID":"20241011010359-07vs7cy","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241011010359-07vs7cy","updated":"20241011010359"},"Children":[{"ID":"20241011010359-2jbgzn1","Type":"NodeParagraph","Properties":{"id":"20241011010359-2jbgzn1","updated":"20241011010359"},"Children":[{"Type":"NodeText","Data":"Java不允许使用函数内嵌套函数，转译时所以必须用静态类来表达"}]}]},{"ID":"20241011010359-2u98me4","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20241011010359-2u98me4","updated":"20241011010359"},"Children":[{"ID":"20241011010359-j4suwa1","Type":"NodeParagraph","Properties":{"id":"20241011010359-j4suwa1","updated":"20241011010359"},"Children":[{"Type":"NodeText","Data":"scala的诸多的语法糖，比如可以省略的代码段花括号，分号，num1.plus(num2)时的括号和点，return命令，可被推导的变量类型；以及加号替代的append操作"}]}]}]},{"ID":"20241011010359-ir7x8u8","Type":"NodeParagraph","Properties":{"id":"20241011010359-ir7x8u8","updated":"20241011010359"},"Children":[{"Type":"NodeText","Data":"如果要刨根问底的话，最根本的差别大概是抽象级别的不同。"}]},{"ID":"20241011010359-xf4y39b","Type":"NodeParagraph","Properties":{"id":"20241011010359-xf4y39b","updated":"20241011010359"},"Children":[{"Type":"NodeText","Data":"首先就是Java需要你额外的考虑很多本来不需要考虑的状态。Java里需要你自己处理程序中的状态，让你见树木而不见树林。在Java里你要注意的一个一个的命令以及它们的顺序，比如把变量赋值，或者说在容器里永久删除或加入某个对象，或者用具有严格顺序的初始条件递增操作终止条件来确定一个循环。然而我们人脑绝对不是这么思考的。我们不会用类似于for循环然后定义标志的思路来设计素数检测算法，而是用类似于“一个素数必须满足对于除了1和自身意外的数之外无法整除自身的条件”来思考。"}]},{"ID":"20241011010359-qn8uuh5","Type":"NodeParagraph","Properties":{"id":"20241011010359-qn8uuh5","updated":"20241011010359"},"Children":[{"Type":"NodeText","Data":"其次Java对程序设计中常用的有关序列流程的抽象等级不够。Java类库的设计者当时并没有考虑到把程序设计时使用的映射，化约，集体判别这些相比于数组读写更加高级的设计思路，也就没有设计可以重用的框架。每次我们需要对序列进行操作时都要不自觉地重新造轮子。"}]},{"ID":"20241011010359-usjth5g","Type":"NodeParagraph","Properties":{"id":"20241011010359-usjth5g","updated":"20241011010359"},"Children":[{"Type":"NodeText","Data":"然而对于序列的操作在程序中相当重要，只要考虑到这么一点就行了：对于同一个程序，"}]},{"ID":"20241011010359-rkgyaud","Type":"NodeParagraph","Properties":{"id":"20241011010359-rkgyaud","updated":"20241011010359"},"Children":[{"Type":"NodeText","Data":"大概率要处理很多特性相似的东西。因为如果反过来说，如果是完全不同的东西，则需要完全不同的处理思路，就不在同一个程序里了。"}]},{"ID":"20241011010359-7u3d6u9","Type":"NodeParagraph","Properties":{"id":"20241011010359-7u3d6u9","updated":"20241011010359"},"Children":[{"Type":"NodeText","Data":"一些本来也许不需要的状态的增加，不仅增加了代码量更加增加了思维的负担"}]},{"ID":"20241011010359-tncokhb","Type":"NodeParagraph","Properties":{"id":"20241011010359-tncokhb","updated":"20241011010359"},"Children":[{"Type":"NodeText","Data":"在我使用Java8的Stream API之前，我一直认为Java是简化版的C艹。Java可以在出错的时候显示ArrayOutOfBoundary或NullPointerException而不是C艹千篇一律的Segment Fault（Linux)或根本检测不出来不报错只知道是结果不对（Win），不用在迭代集合的时候使用std::Iterator, 但似乎也仅此而已。"}]},{"ID":"20241011010359-i0b0z76","Type":"NodeParagraph","Properties":{"id":"20241011010359-i0b0z76","updated":"20241011010359"},"Children":[{"Type":"NodeText","Data":"Java语言面向过程的思想依然没有变化，依然没有对常见的数据流这个概念进行抽象。依旧要注意数组的边界，循环中的小于还是小于等于号弄错后的灾难性后果（scala用to和until进行了区别），甚至在GUI编程中为了处理事件必须实现监听器接口或继承适配器抽象类，而不是更简单的回调函数或更灵活的类似JS中的Promise对象。总而言之，Java即时没有对简单"}]},{"ID":"20241011010359-8syk2cs","Type":"NodeParagraph","Properties":{"id":"20241011010359-8syk2cs","updated":"20241011010359"},"Children":[{"Type":"NodeText","Data":"这让我想到了C语言和汇编语言的代码量差别。根据一位Quora用户关于C语言和汇编代码量的回答，对于同样的问题一般来说汇编语言的规模是C语言的5到10倍，虽然scala和java代码规模显然没到这么大的差距但基本上也接近了。"}]},{"ID":"20241011010359-o1bx22p","Type":"NodeParagraph","Properties":{"id":"20241011010359-o1bx22p","updated":"20241011010359"},"Children":[{"Type":"NodeText","Data":"在学scala之前我一直觉得Java是最好的语言，即时是与Python在简洁性上相形见绌，但类型系统和Java 8之后引入的Stream函数式接口是的Java对于IDE的自动补全更加友好也更不容易出现运行时错误。但Java可能太老了，老到连集合类框架刚出的时候甚至不支持泛型，老到甚至不允许嵌套的函数定义，老到在使用集合类的时候甚至不允许使用原始类型。"}]},{"ID":"20241011010359-fszw4ev","Type":"NodeParagraph","Properties":{"id":"20241011010359-fszw4ev","updated":"20241011010359"},"Children":[{"Type":"NodeTextMark","TextMarkType":"block-ref","TextMarkBlockRefID":"20241011010144-626gw28","TextMarkBlockRefSubtype":"d","TextMarkTextContent":"精简稿"}]}]}