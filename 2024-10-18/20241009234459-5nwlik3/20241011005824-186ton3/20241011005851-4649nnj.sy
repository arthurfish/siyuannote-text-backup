{"ID":"20241011005851-4649nnj","Spec":"1","Type":"NodeDocument","Properties":{"id":"20241011005851-4649nnj","title":"用Python Flask搭建网站所想的","type":"doc","updated":"20241011010401"},"Children":[{"ID":"20241011010401-d7876q4","Type":"NodeParagraph","Properties":{"id":"20241011010401-d7876q4","updated":"20241011010401"},"Children":[{"Type":"NodeText","Data":"我摸索网站搭建的过程相当能够体现我的开始就放弃的精神。并非第一次使用Python语言写网站，之前简单尝试过Django，但也只是浅尝辄止，因为当时并不是对MVC或一般的项目结构拥有一定的认识，于是在开始的地方就决定放弃。前年我在温州的时候接触到了Java的Sping框架，老实讲我现在也觉得那玩意相当强大，不过主要原因大概只是我直接被那一大堆的新的人发明的概念和用注释配置的方式弄得直接晕掉。当然我如今试完Flask后还是尝试从Spring 4.x开始学习到Spring Boot。也许实际的项目真的需要Spring那么多复杂的东西？老实讲我觉得还是因为我缺少项目经验。"}]},{"ID":"20241011010401-h96g8oc","Type":"NodeParagraph","Properties":{"id":"20241011010401-h96g8oc","updated":"20241011010401"},"Children":[{"Type":"NodeText","Data":"Flask宣称它是一款轻量级的框架，不需要学习多复杂的层次关系或写多么复杂的配置文件；加上Python特有的语言优势，就可以用相当少的代码构造一个具有各种所需功能的网站（比如传URL参数，登录，表单，安全控制之类的），实际代码量大概可以和Express的量进行对比。我不太确定在实际中到底是“少即是多”还是“多即是多”：一个用比较不需要动脑子的框架写出的网站比一个需要动脑子的框架写出的网站到底好还是不好？能否胜任处理实际工程项目的复杂性问题？我没有多少实践经验很难知道结果。但如果说单纯只是为了做一些不算复杂的网站的话，大概至少在开发效率上Flask有自己的优势，比如博客啊，视频网站啊，导航类的网站之类的。并非所有每天都要宰牛，杀鸡也有杀鸡趁手的刀"}]},{"ID":"20241011010401-fuscxtx","Type":"NodeParagraph","Properties":{"id":"20241011010401-fuscxtx","updated":"20241011010401"},"Children":[{"Type":"NodeText","Data":"与Java Spring 类似，Flask 也广泛地使用了“@”标注来注册特定的函数在指定的场合使用，比如控制器或者是登录时用来加载用户的函数。为什么不使用显式的注册函数来实现这一点呢？就像 Express 的 router.get(path, function) 那样？"}]},{"ID":"20241011010401-25dtn12","Type":"NodeParagraph","Properties":{"id":"20241011010401-25dtn12","updated":"20241011010401"},"Children":[{"Type":"NodeText","Data":"用“@”标注应该有以下一些优点："}]},{"ID":"20241011010401-k3kke03","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20241011010401-k3kke03","updated":"20241011010401"},"Children":[{"ID":"20241011010401-w9ppowd","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20241011010401-w9ppowd","updated":"20241011010401"},"Children":[{"ID":"20241011010401-tqcv664","Type":"NodeParagraph","Properties":{"id":"20241011010401-tqcv664","updated":"20241011010401"},"Children":[{"Type":"NodeText","Data":"不用显式的写出“将特定函数注册为事件处理器”的这一过程，容器或框架会自动完成这一步骤。这可以在某些角度简化思考，提高编程效率，并且通过减少了过程降低了代码出现Bug的风险"}]}]},{"ID":"20241011010401-8mxx87g","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20241011010401-8mxx87g","updated":"20241011010401"},"Children":[{"ID":"20241011010401-f73mx6s","Type":"NodeParagraph","Properties":{"id":"20241011010401-f73mx6s","updated":"20241011010401"},"Children":[{"Type":"NodeText","Data":"类似于Java Doc文档，将注释与源代码写在一起，很大程度上提高了源码的注释性，不需要额外的注释也不需要查阅文档就能确定一个函数是否是注册的请求控制器或登录用户，同时代码的修改也会和注释相同步，比同时修改被注册函数和注册过程更加简单且不容易出错。"}]}]},{"ID":"20241011010401-7puhssv","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20241011010401-7puhssv","updated":"20241011010401"},"Children":[{"ID":"20241011010401-rw4gatm","Type":"NodeParagraph","Properties":{"id":"20241011010401-rw4gatm","updated":"20241011010401"},"Children":[{"Type":"NodeText","Data":"让一个函数更加像一个具体的对象。除了运行时为了完成函数功能的在栈上堆上分配空间的所谓的局部变量外增加了独立于运行之外的属性，有点像类模型中的”静态变量“或者Javascript中的函数对象的内置属性，而这种属性的可读性更强，也不会对函数内的执行过程产生干扰。"}]}]}]},{"ID":"20241011010401-et7u6y3","Type":"NodeParagraph","Properties":{"id":"20241011010401-et7u6y3","updated":"20241011010401"},"Children":[{"Type":"NodeText","Data":"同时对我来说应该也有以下这些缺点："}]},{"ID":"20241011010401-ax598xb","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20241011010401-ax598xb","updated":"20241011010401"},"Children":[{"ID":"20241011010401-gikadeo","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20241011010401-gikadeo","updated":"20241011010401"},"Children":[{"ID":"20241011010401-s2b7va1","Type":"NodeParagraph","Properties":{"id":"20241011010401-s2b7va1","updated":"20241011010401"},"Children":[{"Type":"NodeText","Data":"标注需要语言层面的反射或说自省机制所支持，很多基于编译的语言并未实现此机制（也有可能是我不知道？）也就无法支持标注。"}]}]},{"ID":"20241011010401-yin6ej2","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20241011010401-yin6ej2","updated":"20241011010401"},"Children":[{"ID":"20241011010401-928aqz4","Type":"NodeParagraph","Properties":{"id":"20241011010401-928aqz4","updated":"20241011010401"},"Children":[{"Type":"NodeText","Data":"标注似乎与框架，容器这些概念相关，而实践中这些系统的使用增加了系统的复杂程度和脆弱程度(?)，而且特别特别对于初学者不友好（我现在还没完全弄懂Java的类加载的机制和Spring的Bean容器系统）。和这些编程上的复杂性真的是处理现实复杂度的必要代价吗？联想高级语言的发展历程，我持相当怀疑的态度。"}]}]},{"ID":"20241011010401-z03a4e5","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20241011010401-z03a4e5","updated":"20241011010401"},"Children":[{"ID":"20241011010401-05vtgv8","Type":"NodeParagraph","Properties":{"id":"20241011010401-05vtgv8","updated":"20241011010401"},"Children":[{"Type":"NodeText","Data":"这可能是我自身的问题。我感觉标注和传统的代码相比自成一个体系，像“宏”一样像是另一个世界的东西。而且我相当感性的觉得用标注来处理是一种相当不优雅的范式，绝对可以用更自然的方式处理这个问题并提升其通用性。一种问题并非只有一种解决方案，如同OOP领域中基于类的处理方案和基于对象继承链的处理方式，一定有比标注更好更有效的方式来实现乃至扩充标注本身的语义。"}]}]}]},{"ID":"20241011010401-psu3ett","Type":"NodeParagraph","Properties":{"id":"20241011010401-psu3ett","updated":"20241011010401"},"Children":[{"Type":"NodeText","Data":"我对Flask的认识其实还处在一种云里雾里的状态。我知道它能做什么：它能快速的用模板渲染网页；用指定的函数处理特定的URL请求；能够访问数据库，并且进行简单的ORM（对象关系映射）；在请求级别进行保护，简单地实现Session机制不用像Spring那样考虑各种各样的跨请求用户数据同步方案比如Flash什么的；也有表单验证的解决方案（通过那个辨识度高的自带的表单域验证警告的样式我发现一个我日常使用的机场似乎就是用Flask搭的）。我现在想想我曾经对MVC的不屑一顾大概还是因为我陷入了app一定优于网页的思维范式，我是以开发app后端而不是开发网站后端的要求来思考整个构建过程，前后端分离确实好但决定并非唯一的开发形式。也许我未来应该思考SPA（单页应用）和类似JSP的模板渲染到底是否是混合-分离问题的两种极端，在它们中间的选择是离散性的还是像光谱一样连续型的。在网站构筑领域到底是存在一种万能的解决方案还是不同场景对应不同架构？真的得一样一样试才能知道吗？老实讲真不愿意做那么多重复琐屑的事情。"}]},{"ID":"20241011010401-k4x6pau","Type":"NodeParagraph","Properties":{"id":"20241011010401-k4x6pau","updated":"20241011010401"},"Children":[{"Type":"NodeText","Data":"我在处理这些项目的时候有一个头疼的问题，就是各种各样的配置。从Spring的基于xml的或Java代码的配置到开发环境vscode运行任务的配置，处理起来无一例外都让我十分难受。不过听说现在流行的“约定大于配置”的思想对未来还是有一些希望。软件设计有艺术和哲学那配置文件设计也有艺术和哲学吗？我觉得工程学的知识应该能发挥一些作用。我知道并且能确定，配置是个永远不会消失的东西，如果忽视并听之任之可能会有严重的后果。"}]}]}